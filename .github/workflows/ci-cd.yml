# name: Pet-Vet CI/CD Pipeline

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]

# env:
#   NODE_VERSION: '18'
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}

# jobs:
#   # Job para testing y linting
#   test:
#     runs-on: ubuntu-latest
    
#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_DB: test_db
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432
      
#       redis:
#         image: redis:7-alpine
#         options: >-
#           --health-cmd "redis-cli ping"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 6379:6379

#     strategy:
#       matrix:
#         service: [gateway, auth-service, appointment-service, chat-service]

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ env.NODE_VERSION }}
#         cache: 'npm'

#     - name: Install dependencies
#       run: |
#         npm ci
#         cd apps/${{ matrix.service }}
#         npm ci

#     - name: Run linting
#       run: |
#         cd apps/${{ matrix.service }}
#         npm run lint || echo "Linting not configured"

#     - name: Run tests
#       run: |
#         cd apps/${{ matrix.service }}
#         npm run test
#       env:
#         DB_HOST: localhost
#         DB_PORT: 5432
#         DB_USERNAME: postgres
#         DB_PASSWORD: postgres
#         DB_NAME: test_db
#         REDIS_HOST: localhost
#         REDIS_PORT: 6379
#         JWT_SECRET: test-secret-key

#     - name: Run e2e tests
#       run: |
#         cd apps/${{ matrix.service }}
#         npm run test:e2e || echo "E2E tests not configured"
#       env:
#         DB_HOST: localhost
#         DB_PORT: 5432
#         DB_USERNAME: postgres
#         DB_PASSWORD: postgres
#         DB_NAME: test_db

#   # Job para testing del frontend
#   test-frontend:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ env.NODE_VERSION }}
#         cache: 'npm'

#     - name: Install dependencies
#       run: |
#         npm ci
#         cd apps/frontend
#         npm ci

#     - name: Run linting
#       run: |
#         cd apps/frontend
#         npm run lint || echo "Linting not configured"

#     - name: Run tests
#       run: |
#         cd apps/frontend
#         npm run test || echo "Tests not configured"

#     - name: Build frontend
#       run: |
#         cd apps/frontend
#         npm run build

#   # Job para build y deployment
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     needs: [test, test-frontend]
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ env.NODE_VERSION }}
#         cache: 'npm'

#     - name: Install dependencies
#       run: |
#         npm ci
#         npm run setup

#     - name: Build all services
#       run: npm run build

#     - name: Log in to Container Registry
#       uses: docker/login-action@v3
#       with:
#         registry: ${{ env.REGISTRY }}
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}

#     # Build y push Docker images para cada servicio
#     - name: Build and push Gateway image
#       uses: docker/build-push-action@v5
#       with:
#         context: ./apps/gateway
#         push: true
#         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:latest

#     - name: Build and push Auth Service image
#       uses: docker/build-push-action@v5
#       with:
#         context: ./apps/auth-service
#         push: true
#         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:latest

#     - name: Build and push Appointment Service image
#       uses: docker/build-push-action@v5
#       with:
#         context: ./apps/appointment-service
#         push: true
#         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/appointment-service:latest

#     - name: Build and push Chat Service image
#       uses: docker/build-push-action@v5
#       with:
#         context: ./apps/chat-service
#         push: true
#         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/chat-service:latest

#     - name: Build and push Frontend image
#       uses: docker/build-push-action@v5
#       with:
#         context: ./apps/frontend
#         push: true
#         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest

#   # Job para security scanning
#   security-scan:
#     runs-on: ubuntu-latest
#     needs: [test, test-frontend]
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Run Trivy vulnerability scanner
#       uses: aquasecurity/trivy-action@master
#       with:
#         scan-type: 'fs'
#         scan-ref: '.'
#         format: 'sarif'
#         output: 'trivy-results.sarif'

#     - name: Upload Trivy scan results to GitHub Security tab
#       uses: github/codeql-action/upload-sarif@v3
#       with:
#         sarif_file: 'trivy-results.sarif'

#   # Job para code quality
#   code-quality:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ env.NODE_VERSION }}
#         cache: 'npm'

#     - name: Install dependencies
#       run: npm ci

#     - name: Run SonarCloud Scan
#       uses: SonarSource/sonarcloud-github-action@master
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       with:
#         args: >
#           -Dsonar.projectKey=pet-vet-microservices
#           -Dsonar.organization=your-org
#           -Dsonar.sources=apps/
#           -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/*.spec.ts,**/*.test.ts
